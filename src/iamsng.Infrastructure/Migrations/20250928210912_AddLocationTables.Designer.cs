// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iamsng.Infrastructure.Data;

#nullable disable

namespace iamsng.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250928210912_AddLocationTables")]
    partial class AddLocationTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("iamsng.Core.Entities.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("building_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("building_number")
                        .HasComment("Unique building identifier/number");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("BuildingId")
                        .HasName("PK_building");

                    b.HasIndex("BuildingNumber")
                        .IsUnique()
                        .HasDatabaseName("UX_building_number");

                    b.ToTable("building", null, t =>
                        {
                            t.HasComment("Physical buildings where assets and equipment are located");
                        });

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            BuildingNumber = "Building 370",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Version = 1
                        },
                        new
                        {
                            BuildingId = 2,
                            BuildingNumber = "Building 010",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Version = 1
                        },
                        new
                        {
                            BuildingId = 3,
                            BuildingNumber = "Building 012",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Version = 1
                        },
                        new
                        {
                            BuildingId = 4,
                            BuildingNumber = "Building 001",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Version = 1
                        },
                        new
                        {
                            BuildingId = 5,
                            BuildingNumber = "Building 014",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Version = 1
                        },
                        new
                        {
                            BuildingId = 6,
                            BuildingNumber = "Building 350",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Version = 1
                        },
                        new
                        {
                            BuildingId = 7,
                            BuildingNumber = "Building 377",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Version = 1
                        },
                        new
                        {
                            BuildingId = 8,
                            BuildingNumber = "Building 403",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            Version = 1
                        });
                });

            modelBuilder.Entity("iamsng.Core.Entities.Floor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("floor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FloorId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("FloorNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("floor_number")
                        .HasComment("Unique floor identifier/number");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("FloorId")
                        .HasName("PK_floor");

                    b.HasIndex("FloorNumber")
                        .IsUnique()
                        .HasDatabaseName("UX_floor_number");

                    b.ToTable("floor", null, t =>
                        {
                            t.HasComment("Floor/level definitions that exist across multiple buildings");
                        });

                    b.HasData(
                        new
                        {
                            FloorId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            FloorNumber = "Floor 001",
                            Version = 1
                        },
                        new
                        {
                            FloorId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            FloorNumber = "Floor 002",
                            Version = 1
                        },
                        new
                        {
                            FloorId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            FloorNumber = "Floor Ground",
                            Version = 1
                        });
                });

            modelBuilder.Entity("iamsng.Core.Entities.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("program_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("LegacyProgramName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("legacy_program_name")
                        .HasComment("Historical/legacy program name");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<int?>("ProgramManagerId")
                        .HasColumnType("int")
                        .HasColumnName("program_manager")
                        .HasComment("User ID of program manager (nullable until data available)");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("program_name")
                        .HasComment("Current program name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("ProgramId")
                        .HasName("PK_program");

                    b.HasIndex("LegacyProgramName")
                        .HasDatabaseName("IX_program_legacy_name");

                    b.HasIndex("ProgramId")
                        .HasDatabaseName("IX_program_asset_lookup");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ProgramId"), new[] { "ProgramName", "LegacyProgramName" });

                    b.HasIndex("ProgramManagerId");

                    b.HasIndex("ProgramName")
                        .IsUnique()
                        .HasDatabaseName("UX_program_name");

                    b.ToTable("program", null, t =>
                        {
                            t.HasComment("DoD programs that own/manage industrial assets");
                        });

                    b.HasData(
                        new
                        {
                            ProgramId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            LegacyProgramName = "Patriot",
                            ProgramName = "IFMC",
                            Version = 1
                        },
                        new
                        {
                            ProgramId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            LegacyProgramName = "Himars",
                            ProgramName = "STORM",
                            Version = 1
                        },
                        new
                        {
                            ProgramId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            LegacyProgramName = "TOW",
                            ProgramName = "TAGM",
                            Version = 1
                        },
                        new
                        {
                            ProgramId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            LegacyProgramName = "Avenger",
                            ProgramName = "SHIELD",
                            Version = 1
                        },
                        new
                        {
                            ProgramId = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            LegacyProgramName = "MULTI",
                            ProgramName = "MULTI",
                            Version = 1
                        },
                        new
                        {
                            ProgramId = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            LegacyProgramName = "Sentinel",
                            ProgramName = "STARE",
                            Version = 1
                        });
                });

            modelBuilder.Entity("iamsng.Core.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name")
                        .HasComment("Unique role name for the system");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("RoleId")
                        .HasName("PK_role");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasDatabaseName("UX_role_name");

                    b.ToTable("role", null, t =>
                        {
                            t.HasComment("User roles for RBAC implementation - DoD compliant");
                        });

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(3815), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            RoleName = "system",
                            Version = 1
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(3817), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            RoleName = "cyber_user",
                            Version = 1
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(3819), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            RoleName = "tem_user",
                            Version = 1
                        },
                        new
                        {
                            RoleId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(3820), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            RoleName = "dev_user",
                            Version = 1
                        },
                        new
                        {
                            RoleId = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(3821), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            RoleName = "cyber_mgr",
                            Version = 1
                        },
                        new
                        {
                            RoleId = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(3822), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            RoleName = "tem_mgr",
                            Version = 1
                        },
                        new
                        {
                            RoleId = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(3823), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            RoleName = "org_mgr",
                            Version = 1
                        },
                        new
                        {
                            RoleId = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(3824), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            RoleName = "sys_admin",
                            Version = 1
                        });
                });

            modelBuilder.Entity("iamsng.Core.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("building_id")
                        .HasComment("Building where room is located");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int>("FloorId")
                        .HasColumnType("int")
                        .HasColumnName("floor_id")
                        .HasComment("Floor where room is located");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("room_name")
                        .HasComment("Room name or identifier");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("RoomId")
                        .HasName("PK_room");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("IX_room_building");

                    b.HasIndex("FloorId")
                        .HasDatabaseName("IX_room_floor");

                    b.HasIndex("RoomName")
                        .HasDatabaseName("IX_room_name");

                    b.HasIndex("BuildingId", "FloorId")
                        .HasDatabaseName("IX_room_building_floor");

                    b.ToTable("room", null, t =>
                        {
                            t.HasComment("Specific rooms within buildings, identified by building and floor");
                        });

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            BuildingId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            FloorId = 3,
                            RoomName = "High Power Room",
                            Version = 1
                        },
                        new
                        {
                            RoomId = 2,
                            BuildingId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            FloorId = 3,
                            RoomName = "DLU Garage Oversight Bay",
                            Version = 1
                        });
                });

            modelBuilder.Entity("iamsng.Core.Entities.SmeRole", b =>
                {
                    b.Property<int>("SmeRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("smerole_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmeRoleId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("SmeRoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("smerole_name")
                        .HasComment("Unique SME role/specialization name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("SmeRoleId")
                        .HasName("PK_sme_role");

                    b.HasIndex("SmeRoleName")
                        .IsUnique()
                        .HasDatabaseName("UX_sme_role_name");

                    b.ToTable("sme_role", null, t =>
                        {
                            t.HasComment("Subject Matter Expert roles for specialized expertise designation");
                        });

                    b.HasData(
                        new
                        {
                            SmeRoleId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(7803), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            SmeRoleName = "database_specialist",
                            Version = 1
                        },
                        new
                        {
                            SmeRoleId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(7804), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            SmeRoleName = "vulnerability_specialist",
                            Version = 1
                        },
                        new
                        {
                            SmeRoleId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(7806), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            SmeRoleName = "change_management_specialist",
                            Version = 1
                        },
                        new
                        {
                            SmeRoleId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(7807), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            SmeRoleName = "san_specialist",
                            Version = 1
                        },
                        new
                        {
                            SmeRoleId = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(7808), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            SmeRoleName = "access_control_specialist",
                            Version = 1
                        },
                        new
                        {
                            SmeRoleId = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 9, 28, 21, 9, 12, 507, DateTimeKind.Unspecified).AddTicks(7809), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            SmeRoleName = "rmf_specialist",
                            Version = 1
                        });
                });

            modelBuilder.Entity("iamsng.Core.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<byte>("AccountStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("user_account_status")
                        .HasComment("Account status: 0=Inactive, 1=Active, 2=Suspended, 3=Locked");

                    b.Property<string>("Affiliation")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("user_affiliation")
                        .HasComment("Military branch or civilian agency");

                    b.Property<DateTimeOffset?>("CacExpiry")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("user_cac_expiry")
                        .HasComment("CAC certificate expiration date");

                    b.Property<string>("CertificateDn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("user_certificate_dn")
                        .HasComment("Distinguished Name from CAC certificate");

                    b.Property<string>("CertificateSerial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_certificate_serial")
                        .HasComment("Certificate serial number for tracking");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<long>("DodId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_dodid")
                        .HasComment("10-digit DoD ID number (EDIPI) for CAC authentication");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_email")
                        .HasComment("User's email address - must be unique");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_first")
                        .HasComment("User's first name");

                    b.Property<DateTimeOffset?>("LastCacAuth")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("user_last_cac_auth")
                        .HasComment("Timestamp of last successful CAC authentication");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_last")
                        .HasComment("User's last name");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("PersonDesignator")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("user_person_designator")
                        .HasComment("Personnel type: MILITARY, CIVILIAN, CONTRACTOR");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("user_phone")
                        .HasComment("User's phone number - optional");

                    b.Property<string>("PivAuthCertHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("user_piv_auth_cert_hash")
                        .HasComment("SHA-256 hash of PIV certificate for pinning (MITM protection)");

                    b.Property<bool>("RequiresCac")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("user_requires_cac")
                        .HasComment("Whether CAC authentication is mandatory for this user");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("user_role")
                        .HasComment("Primary role assignment (required)");

                    b.Property<int?>("SmeRoleId")
                        .HasColumnType("int")
                        .HasColumnName("sme_role")
                        .HasComment("Subject Matter Expert role (optional)");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("UserId")
                        .HasName("PK_user");

                    b.HasIndex("AccountStatus")
                        .HasDatabaseName("IX_user_account_status")
                        .HasFilter("[user_account_status] = 1");

                    b.HasIndex("CertificateDn")
                        .HasDatabaseName("IX_user_certificate_dn");

                    b.HasIndex("DodId")
                        .IsUnique()
                        .HasDatabaseName("UX_user_dodid");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UX_user_email");

                    b.HasIndex("SmeRoleId")
                        .HasDatabaseName("IX_user_smerole")
                        .HasFilter("[sme_role] IS NOT NULL");

                    b.HasIndex("RoleId", "AccountStatus")
                        .HasDatabaseName("IX_user_role_status");

                    b.ToTable("user", null, t =>
                        {
                            t.HasComment("System users with CAC authentication support for DoD compliance");
                        });

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccountStatus = (byte)1,
                            Affiliation = "SYSTEM",
                            CertificateDn = "CN=SYSTEM,OU=IAMSNG,O=DoD,C=US",
                            CertificateSerial = "SYSTEM-ACCOUNT-NO-LOGIN",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 1,
                            DodId = 0L,
                            Email = "system@iamsng.local",
                            FirstName = "SYSTEM",
                            LastName = "ACCOUNT",
                            PersonDesignator = "SYSTEM",
                            RequiresCac = false,
                            RoleId = 1,
                            Version = 1
                        });
                });

            modelBuilder.Entity("iamsng.Core.Entities.Program", b =>
                {
                    b.HasOne("iamsng.Core.Entities.User", "ProgramManager")
                        .WithMany()
                        .HasForeignKey("ProgramManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_program_manager_user");

                    b.Navigation("ProgramManager");
                });

            modelBuilder.Entity("iamsng.Core.Entities.Room", b =>
                {
                    b.HasOne("iamsng.Core.Entities.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_room_building");

                    b.HasOne("iamsng.Core.Entities.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_room_floor");

                    b.Navigation("Building");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("iamsng.Core.Entities.User", b =>
                {
                    b.HasOne("iamsng.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_user_role");

                    b.HasOne("iamsng.Core.Entities.SmeRole", "SmeRole")
                        .WithMany("Users")
                        .HasForeignKey("SmeRoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_user_smerole");

                    b.Navigation("Role");

                    b.Navigation("SmeRole");
                });

            modelBuilder.Entity("iamsng.Core.Entities.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("iamsng.Core.Entities.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("iamsng.Core.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("iamsng.Core.Entities.SmeRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
